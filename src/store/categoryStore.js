import { create } from "zustand";
import * as categoryApi from "../api/categoryApi";

// üìå Kategorileri state olarak tutacak olan bir store olu≈üturduk. Bu store i√ßinde kategorileri √ßekme, ekleme, g√ºncelleme ve silme i≈ülemlerini ger√ßekle≈ütirebileceƒüiz. Bu i≈ülemleri API ile haberle≈üerek ger√ßekle≈ütireceƒüiz.

// Zustand store olu≈üturma
const useCategoryStore = create((set) => ({
  categories: [], // üìå Kategorileri burada tutacaƒüƒ±z
  loading: false, // üìå Y√ºklenme durumu
  error: null, // üìå Hata mesajƒ±

  // üü¢ Kategorileri API'den √ßek ve state'e kaydet
  fetchCategories: async () => {
    set({ loading: true, error: null });
    try {
        const response = await categoryApi.fetchCategories();
        console.log("API‚Äôden gelen kategori verisi:", response);

        if (response.data) {
            set({ categories: response.data, loading: false }); // ‚ùå Eskiden { data: [...], errorMessage: null } tutuyordu
        } else {
            set({ error: "Beklenmedik API yanƒ±tƒ±", loading: false });
        }
    } catch (error) {
        set({ error: "API √ßaƒürƒ±sƒ± ba≈üarƒ±sƒ±z", loading: false });
    }
  },

  // üü¢ Yeni kategori ekle
  addCategory: async (categoryData) => {
    try {
      const newCategory = await categoryApi.addCategory(categoryData); // ‚úÖ doƒüru olan bu
      set((state) => ({ categories: [...state.categories, newCategory] }));
      return newCategory; // ‚úÖ geri d√∂nd√ºr√ºyoruz ki frontend'te expanded √ßalƒ±≈üsƒ±n
    } catch (error) {
      set({ error: "Kategori eklenirken hata olu≈ütu!" });
      return null;
    }
  },
  

  // üü¢ Kategori g√ºncelle
  updateCategory: async (id, updatedData) => {
    try {
        await categoryApi.updateCategory(id, updatedData); // API isteƒüi
        set((state) => ({
            categories: state.categories.map((cat) =>
                cat.id === id ? { ...cat, ...updatedData } : cat
            ),
        }));
    } catch (error) {
        console.error("Kategori g√ºncellenirken hata olu≈ütu! ", error);
    }
},


  // üü¢ Kategori sil
  deleteCategory: async (id) => {
    try {
      await categoryApi.deleteCategory(id);
      set((state) => ({
        categories: state.categories.filter((cat) => cat.id !== id),
      }));
    } catch (error) {
      set({ error: "Kategori silinirken hata olu≈ütu!" });
    }
  },
}));

export default useCategoryStore;
