import { create } from "zustand";
import * as categoryApi from "../api/categoryApi";

// üìå Kategorileri state olarak tutacak olan bir store olu≈üturduk. Bu store i√ßinde kategorileri √ßekme, ekleme, g√ºncelleme ve silme i≈ülemlerini ger√ßekle≈ütirebileceƒüiz. Bu i≈ülemleri API ile haberle≈üerek ger√ßekle≈ütireceƒüiz.

// Zustand store olu≈üturma
const useCategoryStore = create((set) => ({
  categories: [], // üìå Kategorileri burada tutacaƒüƒ±z
  allCategories: [], // üìå T√ºm kategorileri burada tutacaƒüƒ±z (API'den √ßekilen)
  loading: false, // üìå Y√ºklenme durumu
  error: null, // üìå Hata mesajƒ±
  totalCategoryCount: 0, // üî¢ Toplam kayƒ±t sayƒ±sƒ±
  totalPages: 1, // üÜï toplam sayfa sayƒ±sƒ±
  currentPage: 1,         // üìÑ Aktif sayfa numarasƒ±
  pageSize: 10,           // üìè Sayfa ba≈üƒ±na kayƒ±t adedi (frontend'de gerekirse deƒüi≈ütirilir)

  // Kategorileri arama filtre ile
  searchCategories: async (filters, sortConfig, pageNumber, pageSize) => {
    set({ loading: true, error: null });
    try {
      console.log(filters);

      debugger; // üîç Konsolda kontrol et
      const payload = {
        filters,
        sort: sortConfig?.key
          ? { key: sortConfig.key, direction: sortConfig.direction || "asc" }
          : undefined,
        pageNumber,
        pageSize
      };

      const data = await categoryApi.searchCategories(payload);

      if (data && data.items) {
        set({
          categories: data.items,
          totalCategoryCount: data.totalCount,
          totalPages: Math.ceil(data.totalCount / pageSize), // üÜï Toplam sayfa hesaplanƒ±r
          currentPage: pageNumber,
          loading: false
        });
        return data; // ‚ùóÔ∏è response d√∂n

      } else {
        set({ error: "Arama sonu√ßlarƒ± alƒ±namadƒ±", loading: false });
      }
    } catch (error) {
      set({ error: "Kategori arama i≈ülemi ba≈üarƒ±sƒ±z", loading: false });
    }
  },


  // üÜï Sayfalama destekli kategori √ßekme
  getPagedCategories: async (pageNumber, pageSize) => {
    set({ loading: true, error: null });
    try {
      const data = await categoryApi.getPagedCategories(pageNumber, pageSize);
      if (data && data.data) {
        set({
          categories: data.data,
          totalCategoryCount: data.totalCount || 0, // burasƒ± backend'den geliyorsa, yoksa 0 ver
          totalPages: Math.ceil((data.totalCount || 0) / pageSize), // üÜï Toplam sayfa hesaplanƒ±r
          loading: false,
          currentPage: pageNumber,
        });
      } else {
        set({ error: "Sayfalanmƒ±≈ü Veri alƒ±namadƒ±", loading: false });
      }
    } catch (error) {
      set({ error: "Sayfalƒ± veri √ßekme ba≈üarƒ±sƒ±z", loading: false });
    }
  },



  // üü¢ Kategorileri API'den √ßek ve state'e kaydet
  fetchCategories: async () => {
    set({ loading: true, error: null });
    try {
      const response = await categoryApi.fetchCategories();
      console.log("API‚Äôden gelen kategori verisi:", response);

      if (response.data) {
        set({ 
          allCategories: response.data, 
          loading: false }); // ‚ùå Eskiden { data: [...], errorMessage: null } tutuyordu
      } else {
        set({ error: "Beklenmedik API yanƒ±tƒ±", loading: false });
      }
    } catch (error) {
      set({ error: "API √ßaƒürƒ±sƒ± ba≈üarƒ±sƒ±z", loading: false });
    }
  },



  // üü¢ Yeni kategori ekle
  addCategory: async (categoryData) => {
    try {
      const newCategory = await categoryApi.addCategory(categoryData); // ‚úÖ doƒüru olan bu
      set((state) => ({ categories: [...state.categories, newCategory] }));
      return newCategory; // ‚úÖ geri d√∂nd√ºr√ºyoruz ki frontend'te expanded √ßalƒ±≈üsƒ±n
    } catch (error) {
      set({ error: "Kategori eklenirken hata olu≈ütu!" });
      return null;
    }
  },


  // üü¢ Kategori g√ºncelle
  updateCategory: async (id, updatedData) => {
    try {
      await categoryApi.updateCategory(id, updatedData); // API isteƒüi
      set((state) => ({
        categories: state.categories.map((cat) =>
          cat.id === id ? { ...cat, ...updatedData } : cat
        ),
      }));
    } catch (error) {
      console.error("Kategori g√ºncellenirken hata olu≈ütu! ", error);
    }
  },


  // üü¢ Kategori sil
  deleteCategory: async (id) => {
    try {
      await categoryApi.deleteCategory(id);
      set((state) => ({
        categories: state.categories.filter((cat) => cat.id !== id),
      }));
    } catch (error) {
      set({ error: "Kategori silinirken hata olu≈ütu!" });
    }
  },
}));

export default useCategoryStore;
